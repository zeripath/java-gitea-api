/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.gitea.api;

import io.gitea.ApiException;
import io.gitea.model.*;

import java.io.File;

import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RepositoryApi
 */
@Ignore
public class RepositoryApiTest {

    private final RepositoryApi api = new RepositoryApi();

    
    /**
     * Create a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCurrentUserRepoTest() throws ApiException {
        CreateRepoOption body = null;
        Repository response = api.createCurrentUserRepo(body);

        // TODO: test validations
    }
    
    /**
     * Fork a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createForkTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateForkOption body = null;
        Repository response = api.createFork(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s forks
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listForksTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<Repository> response = api.listForks(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Add a collaborator to a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoAddCollaboratorTest() throws ApiException {
        String owner = null;
        String repo = null;
        String collaborator = null;
        AddCollaboratorOption body = null;
        api.repoAddCollaborator(owner, repo, collaborator, body);

        // TODO: test validations
    }
    
    /**
     * Check if a user is a collaborator of a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCheckCollaboratorTest() throws ApiException {
        String owner = null;
        String repo = null;
        String collaborator = null;
        api.repoCheckCollaborator(owner, repo, collaborator);

        // TODO: test validations
    }
    
    /**
     * Create a hook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateHookOption body = null;
        Hook response = api.repoCreateHook(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Add a key to a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateKeyTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateKeyOption body = null;
        DeployKey response = api.repoCreateKey(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreatePullRequestTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreatePullRequestOption body = null;
        PullRequest response = api.repoCreatePullRequest(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a release
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateReleaseTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateReleaseOption body = null;
        Release response = api.repoCreateRelease(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a release attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateReleaseAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        File attachment = null;
        String name = null;
        Attachment response = api.repoCreateReleaseAttachment(owner, repo, id, attachment, name);

        // TODO: test validations
    }
    
    /**
     * Create a commit status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateStatusTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        CreateStatusOption body = null;
        List<Status> response = api.repoCreateStatus(owner, repo, sha, body);

        // TODO: test validations
    }
    
    /**
     * Delete a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.repoDelete(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Delete a collaborator from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteCollaboratorTest() throws ApiException {
        String owner = null;
        String repo = null;
        String collaborator = null;
        api.repoDeleteCollaborator(owner, repo, collaborator);

        // TODO: test validations
    }
    
    /**
     * Delete a hook in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        api.repoDeleteHook(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a key from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteKeyTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        api.repoDeleteKey(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a release
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteReleaseTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        api.repoDeleteRelease(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a release attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteReleaseAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        api.repoDeleteReleaseAttachment(owner, repo, id, attachmentId);

        // TODO: test validations
    }
    
    /**
     * Edit a hook in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditHookOption body = null;
        Hook response = api.repoEditHook(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Update a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditPullRequestTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditPullRequestOption body = null;
        PullRequest response = api.repoEditPullRequest(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Update a release
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditReleaseTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditReleaseOption body = null;
        Release response = api.repoEditRelease(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Edit a release attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditReleaseAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        EditAttachmentOptions body = null;
        Attachment response = api.repoEditReleaseAttachment(owner, repo, id, attachmentId, body);

        // TODO: test validations
    }
    
    /**
     * Get a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetTest() throws ApiException {
        String owner = null;
        String repo = null;
        Repository response = api.repoGet(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Get an archive of a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetArchiveTest() throws ApiException {
        String owner = null;
        String repo = null;
        String archive = null;
        api.repoGetArchive(owner, repo, archive);

        // TODO: test validations
    }
    
    /**
     * Retrieve a specific branch from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetBranchTest() throws ApiException {
        String owner = null;
        String repo = null;
        String branch = null;
        Branch response = api.repoGetBranch(owner, repo, branch);

        // TODO: test validations
    }
    
    /**
     * Get a repository by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetByIDTest() throws ApiException {
        Long id = null;
        Repository response = api.repoGetByID(id);

        // TODO: test validations
    }
    
    /**
     * Get a commit&#39;s combined status, by branch/tag/commit reference
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetCombinedStatusByRefTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        Integer page = null;
        Status response = api.repoGetCombinedStatusByRef(owner, repo, ref, page);

        // TODO: test validations
    }
    
    /**
     * Get the EditorConfig definitions of a file in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetEditorConfigTest() throws ApiException {
        String owner = null;
        String repo = null;
        String filepath = null;
        api.repoGetEditorConfig(owner, repo, filepath);

        // TODO: test validations
    }
    
    /**
     * Get a hook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Hook response = api.repoGetHook(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get a repository&#39;s key by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetKeyTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        DeployKey response = api.repoGetKey(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetPullRequestTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        PullRequest response = api.repoGetPullRequest(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Get a file from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetRawFileTest() throws ApiException {
        String owner = null;
        String repo = null;
        String filepath = null;
        api.repoGetRawFile(owner, repo, filepath);

        // TODO: test validations
    }
    
    /**
     * Get a release
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetReleaseTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Release response = api.repoGetRelease(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get a release attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetReleaseAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        Attachment response = api.repoGetReleaseAttachment(owner, repo, id, attachmentId);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s branches
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListBranchesTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<Branch> response = api.repoListBranches(owner, repo);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s collaborators
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListCollaboratorsTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<User> response = api.repoListCollaborators(owner, repo);

        // TODO: test validations
    }
    
    /**
     * List the hooks in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListHooksTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<Hook> response = api.repoListHooks(owner, repo);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s keys
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListKeysTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer keyId = null;
        String fingerprint = null;
        List<DeployKey> response = api.repoListKeys(owner, repo, keyId, fingerprint);

        // TODO: test validations
    }
    
    /**
     * List a repo&#39;s pull requests
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListPullRequestsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        String state = null;
        String sort = null;
        Long milestone = null;
        List<Long> labels = null;
        List<PullRequest> response = api.repoListPullRequests(owner, repo, page, state, sort, milestone, labels);

        // TODO: test validations
    }
    
    /**
     * List release&#39;s attachments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListReleaseAttachmentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        List<Attachment> response = api.repoListReleaseAttachments(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * List a repo&#39;s releases
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListReleasesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer perPage = null;
        List<Release> response = api.repoListReleases(owner, repo, page, perPage);

        // TODO: test validations
    }
    
    /**
     * List a repo&#39;s stargazers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListStargazersTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<User> response = api.repoListStargazers(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Get a commit&#39;s statuses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListStatusesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        Integer page = null;
        String sort = null;
        String state = null;
        List<Status> response = api.repoListStatuses(owner, repo, sha, page, sort, state);

        // TODO: test validations
    }
    
    /**
     * List a repo&#39;s watchers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListSubscribersTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<User> response = api.repoListSubscribers(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Merge a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoMergePullRequestTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        MergePullRequestOption body = null;
        api.repoMergePullRequest(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Migrate a remote git repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoMigrateTest() throws ApiException {
        MigrateRepoForm body = null;
        Repository response = api.repoMigrate(body);

        // TODO: test validations
    }
    
    /**
     * Sync a mirrored repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoMirrorSyncTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.repoMirrorSync(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Check if a pull request has been merged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoPullRequestIsMergedTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        api.repoPullRequestIsMerged(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Search for repositories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoSearchTest() throws ApiException {
        String q = null;
        Boolean topic = null;
        Boolean includeDesc = null;
        Long uid = null;
        Long starredBy = null;
        Integer page = null;
        Boolean _private = null;
        Integer limit = null;
        String mode = null;
        Boolean exclusive = null;
        String sort = null;
        String order = null;
        SearchResults response = api.repoSearch(q, topic, includeDesc, uid, starredBy, _private, page, limit, mode, exclusive, sort, order);

        // TODO: test validations
    }
    
    /**
     * Test a push webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoTestHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        api.repoTestHook(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * List a repo&#39;s tracked times
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoTrackedTimesTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<TrackedTime> response = api.repoTrackedTimes(owner, repo);

        // TODO: test validations
    }
    
    /**
     * search topics via keyword
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void topicSearchTest() throws ApiException {
        String q = null;
        List<TopicResponse> response = api.topicSearch(q);

        // TODO: test validations
    }
    
    /**
     * Check if the current user is watching a repo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrentCheckSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        WatchInfo response = api.userCurrentCheckSubscription(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Unwatch a repo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrentDeleteSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.userCurrentDeleteSubscription(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Watch a repo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrentPutSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        WatchInfo response = api.userCurrentPutSubscription(owner, repo);

        // TODO: test validations
    }
    
}
