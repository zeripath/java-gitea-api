/*
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.gitea.api;

import io.gitea.ApiException;
import io.gitea.model.AddTimeOption;
import io.gitea.model.Comment;
import io.gitea.model.CreateIssueCommentOption;
import io.gitea.model.CreateIssueOption;
import io.gitea.model.CreateLabelOption;
import io.gitea.model.CreateMilestoneOption;
import io.gitea.model.EditDeadlineOption;
import io.gitea.model.EditIssueCommentOption;
import io.gitea.model.EditIssueOption;
import io.gitea.model.EditLabelOption;
import io.gitea.model.EditMilestoneOption;
import io.gitea.model.Issue;
import io.gitea.model.IssueDeadline;
import io.gitea.model.IssueLabelsOption;
import io.gitea.model.Label;
import io.gitea.model.Milestone;
import io.gitea.model.TrackedTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueApi
 */
@Ignore
public class IssueApiTest {

    private final IssueApi api = new IssueApi();

    
    /**
     * Add a label to an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueAddLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        IssueLabelsOption body = null;
        List<Label> response = api.issueAddLabel(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Add a tracked time to a issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueAddTimeTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        AddTimeOption body = null;
        TrackedTime response = api.issueAddTime(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Remove all labels from an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueClearLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        api.issueClearLabels(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Add a comment to an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        CreateIssueCommentOption body = null;
        Comment response = api.issueCreateComment(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Create an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateIssueOption body = null;
        Issue response = api.issueCreateIssue(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a label
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateLabelOption body = null;
        Label response = api.issueCreateLabel(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a milestone
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateMilestoneOption body = null;
        Milestone response = api.issueCreateMilestone(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Delete a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        api.issueDeleteComment(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteCommentDeprecatedTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer index = null;
        Long id = null;
        api.issueDeleteCommentDeprecated(owner, repo, index, id);

        // TODO: test validations
    }
    
    /**
     * Delete a label
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        api.issueDeleteLabel(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a milestone
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        api.issueDeleteMilestone(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Edit a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditIssueCommentOption body = null;
        Comment response = api.issueEditComment(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Edit a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditCommentDeprecatedTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer index = null;
        Long id = null;
        EditIssueCommentOption body = null;
        Comment response = api.issueEditCommentDeprecated(owner, repo, index, id, body);

        // TODO: test validations
    }
    
    /**
     * Edit an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditIssueOption body = null;
        Issue response = api.issueEditIssue(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Set an issue deadline. If set to null, the deadline is deleted.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditIssueDeadlineTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditDeadlineOption body = null;
        IssueDeadline response = api.issueEditIssueDeadline(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Update a label
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditLabelOption body = null;
        Label response = api.issueEditLabel(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Update a milestone
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditMilestoneOption body = null;
        Milestone response = api.issueEditMilestone(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * List all comments on an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetCommentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        String since = null;
        List<Comment> response = api.issueGetComments(owner, repo, index, since);

        // TODO: test validations
    }
    
    /**
     * Get an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Issue response = api.issueGetIssue(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Get a single label
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Label response = api.issueGetLabel(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get an issue&#39;s labels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        List<Label> response = api.issueGetLabels(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Get a milestone
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Milestone response = api.issueGetMilestone(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get all of a repository&#39;s milestones
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetMilestonesListTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        List<Milestone> response = api.issueGetMilestonesList(owner, repo, state);

        // TODO: test validations
    }
    
    /**
     * List all comments in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetRepoCommentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        String since = null;
        List<Comment> response = api.issueGetRepoComments(owner, repo, since);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s issues
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueListIssuesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        String labels = null;
        Integer page = null;
        String q = null;
        List<Issue> response = api.issueListIssues(owner, repo, state, labels, page, q);

        // TODO: test validations
    }
    
    /**
     * Get all of a repository&#39;s labels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueListLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<Label> response = api.issueListLabels(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Remove a label from an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueRemoveLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        api.issueRemoveLabel(owner, repo, index, id);

        // TODO: test validations
    }
    
    /**
     * Replace an issue&#39;s labels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueReplaceLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        IssueLabelsOption body = null;
        List<Label> response = api.issueReplaceLabels(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * List an issue&#39;s tracked times
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueTrackedTimesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        List<TrackedTime> response = api.issueTrackedTimes(owner, repo, id);

        // TODO: test validations
    }
    
}
